---
locale_id: en
locale_name: English
messages:
  ADDRESS:BEGIN:
    args: 1
    format: Begin testing address %s.
  ADDRESS:END:
    args: 1
    format: Done testing address %s.
  ADDRESS:INVALID:
    args: 1
    descr: ~
    format: Address %s is invalid or incorrect.
  ADDRESS:PRIVATE_IPV4:
    args: 1
    descr: "A private IP address should normally not be exposed in the public DNS, since it's not reachable from the Internet."
    format: '%s is a private IPv4 address.'
  ADDRESS:PTR_HOSTNAME_NOT_FOUND:
    args: 2
    descr: The PTR record for the address points to an unknown host name.
    format: Reverse for %s points to an unknown host name (%s).
  ADDRESS:PTR_NOT_FOUND:
    args: 2
    descr: PTR record(s) for the address could not be found in the .arpa-zone. (ip6.arpa. for IPv6 addresses and in-addr.arpa. for IPv4).
    format: Could not find reverse address for %s (%s).
  ADDRESS:RESERVED_IPV4:
    args: 1
    descr: Reserved IPv4 addresses should not be used on the public Internet.
    format: '%s is a reserved IPv4 address.'
  ADDRESS:RESERVED_IPV6:
    args: 1
    descr: Reserved IPv6 addresses should not be used on the public Internet.
    format: '%s is a reserved IPv6 address.'
  ASN:ANNOUNCE_BY:
    args: 2
    format: '%s announced by AS %s.'
  ASN:INVALID_ADDRESS:
    args: 1
    format: '%s is an invalid IP address.'
  ASN:LOOKUP:
    args: 1
    format: Looking up AS number for %s.
  ASN:LOOKUP_ERROR:
    args: 1
    format: Error looking up AS number for %s.
  ASN:NOT_ANNOUNCE:
    args: 1
    format: '%s not announced.'
  CONNECTIVITY:ANNOUNCED_BY_ASN:
    args: 2
    descr: The IP address is announced by an autonomous system (AS).
    format: 'Name server %s announced by: %s'
  CONNECTIVITY:ASN_COUNT_OK:
    args: 1
    descr: The zone's name servers are located within more than one autonomous system.
    format: Zone announced by more than one ASN (%s).
  CONNECTIVITY:ASN_LIST:
    args: 1
    format: 'Zone announced by IPv4 ASN: %s'
  CONNECTIVITY:BEGIN:
    args: 1
    format: Begin testing connectivity for %s.
  CONNECTIVITY:END:
    args: 1
    format: Done testing connectivity for %s.
  CONNECTIVITY:MULTIPLE_ASN:
    args: 1
    descr: The name server is announced by more than one autonomous system (AS).
    format: Name server %s announced by multiple AS.
  CONNECTIVITY:NOT_ANNOUNCED:
    args: 1
    descr: The IP address is not announced by any autonomous system and is most probably not reachable on the Internet.
    format: Name server %s not announced by any AS.
  CONNECTIVITY:TOO_FEW_ASN:
    args: 1
    descr: "The zone's name servers are all located within the same, (or no), autonomous system."
    format: Zone announced by fewer than two IPv4 ASN (%s).
  CONNECTIVITY:V6_ANNOUNCED_BY_ASN:
    args: 2
    descr: The IP address is announced by an autonomous system (AS).
    format: 'Name server %s announced over IPv6 by: %s'
  CONNECTIVITY:V6_ASN_COUNT_OK:
    args: 1
    descr: The zone's name servers are located within more than one autonomous system.
    format: Zone announced by more than one IPv6 ASN (%s).
  CONNECTIVITY:V6_ASN_LIST:
    args: 1
    format: 'Zone announced by IPv6 ASN: %s'
  CONNECTIVITY:V6_MULTIPLE_ASN:
    args: 1
    descr: The name server is announced by more than one IPv6 autonomous system (AS).
    format: Name server %s announced by multiple IPv6 AS.
  CONNECTIVITY:V6_NOT_ANNOUNCED:
    args: 1
    descr: The IP address is not announced by any autonomous system and is most probably not reachable on the Internet.
    format: Name server %s not announced by any IPv6 AS.
  CONNECTIVITY:V6_TOO_FEW_ASN:
    args: 1
    descr: "The zone's name servers are all located within the same, (or no), autonomous system."
    format: Zone announced by fewer than two IPv6 ASN (%s).
  CONSISTENCY:BEGIN:
    args: 1
    format: Begin testing zone consistency for %s.
  CONSISTENCY:END:
    args: 1
    format: Done testing zone consistency for %s.
  CONSISTENCY:SOA_DIGEST_AT_ADDRESS:
    args: 2
    format: SOA at address %s has digest %s.
  CONSISTENCY:SOA_DIGEST_CONSISTENT:
    args: 0
    format: All other fields in the SOA record are consistent among all name servers.
  CONSISTENCY:SOA_DIGEST_DIFFERENT:
    args: 1
    descr: The other fields in the SOA record are not the same among all name servers. This is usually due to misconfiguration.
    format: '%s different SOA records found.'
  CONSISTENCY:SOA_SERIAL_AT_ADDRESS:
    args: 2
    format: SOA at address %s has serial %s.
  CONSISTENCY:SOA_SERIAL_CONSISTENT:
    args: 0
    format: All SOA records have consistent serial numbers.
  CONSISTENCY:SOA_SERIAL_DIFFERENT:
    args: 1
    descr: 'The SOA serial is not the same on all name servers. This is usually due to misconfiguration, but can sometimes be the result of slow zone propagation to secondary name servers.'
    format: '%s different serials found.'
  DELEGATION:BEGIN:
    args: 1
    format: Begin testing delegation for %s.
  DELEGATION:BROKEN_BUT_FUNCTIONAL:
    args: 1
    format: 'Not enough nameserver information was found to test the zone %s, but an IP address lookup succeeded in spite of that.'
  DELEGATION:BROKEN_UNDELEGATED:
    args: 1
    format: 'Test for zone %s was marked as undelegated, but no working fake glue was provided.'
  DELEGATION:END:
    args: 1
    format: Done testing delegation for %s.
  DELEGATION:EXTRA_NS_CHILD:
    args: 1
    descr: 'A name server listed at the child, but not at the parent, was found. This is most likely a configuration error, but there are sometimes reasons for setting up a zone this way.'
    format: 'Additional name server listed at child: %s'
  DELEGATION:EXTRA_NS_PARENT:
    args: 1
    descr: 'A name server listed at the parent, but not at the child, was found. This is most likely an administrative error. You should update the parent to match the name servers at the child as soon as possible.'
    format: 'Superfluous name server listed at parent: %s'
  DELEGATION:GLUE_FOUND_AT_CHILD:
    args: 3
    descr: The IP address of the name server was found at the child.
    format: 'Child glue for %s found: %s (%s)'
  DELEGATION:GLUE_FOUND_AT_PARENT:
    args: 3
    descr: The IP address of the name server was found at the parent.
    format: 'Parent glue for %s found: %s (%s)'
  DELEGATION:GLUE_MISSING_AT_CHILD:
    args: 1
    descr: The IP address of the name server was not found at the child. This is a configuration error and should be corrected as soon as possible.
    format: 'Missing glue at child: %s'
  DELEGATION:GLUE_SKIPPED:
    args: 2
    format: Skipped glue for %s (%s).
  DELEGATION:INCONSISTENT_GLUE:
    args: 1
    descr: The address of a name server differed between the child and the parent.  This is a configuration error and should be corrected as soon as possible.
    format: Inconsistent glue for name server %s.
  DELEGATION:INZONE_NS_WITHOUT_GLUE:
    args: 2
    format: Nameserver %s is listed for zone %s without address information.
  DELEGATION:IPV6_ONLY_AT_CHILD:
    args: 1
    format: 'Nameservers with IPv6 address(es) are listed in the zone %s, but not in its parent.'
  DELEGATION:IPV6_ONLY_AT_PARENT:
    args: 1
    format: 'Nameservers with IPv6 were listed in the parent zone for %s, but not in the zone itself.'
  DELEGATION:MATCHING_GLUE:
    args: 2
    format: Checking glue for %s (%s).
  DELEGATION:NOT_FOUND_AT_CHILD:
    args: 0
    descr: No name servers could be found at the child. This usually means that the child is not configured to answer queries about the zone.
    format: No name servers found at child.
  DELEGATION:NOT_FOUND_AT_PARENT:
    args: 0
    descr: 'No delegation could be found at the parent, making the zone unreachable from the Internet.'
    format: Delegation not found at parent.
  DELEGATION:NO_COMMON_NS_NAMES:
    args: 2
    descr: "The parent lists name servers that the child doesn't know about; see details in advanced. This configuration could actually work but breaks very easily if one of these zones changes slightly."
    format: Total parent/child glue mismatch.
  DELEGATION:NO_NS_IPV4:
    args: 0
    format: No IPv4 name servers found.
  DELEGATION:NO_NS_IPV6:
    args: 0
    format: No IPv6 name servers found.
  DELEGATION:NS_AT_CHILD:
    args: 1
    descr: This is the list of name servers that are listed at the child. It must include all name servers listed at the parent.
    format: 'Name servers listed at child: %s'
  DELEGATION:NS_AT_PARENT:
    args: 1
    descr: This is the list of name servers that are listed at the parent. It should include all name servers listed at the child.
    format: 'Name servers listed at parent: %s'
  DELEGATION:NS_HISTORY:
    args: 2
    format: 'Previously used name servers for %s: %s'
  DELEGATION:NS_IS_CNAME:
    args: 2
    format: 'In zone %s nameserver %s has a CNAME record, which is forbidden.'
  DELEGATION:STILL_AUTH:
    args: 3
    descr: 'A previously used name server is still answering authoritatively for the zone.  This is probably due to old zone data still being served by a server no longer in use.  Contact the administrator of the name server and have them remove the zone from their configuration.'
    format: Previously used name server %s (%s) is still authoritative for %s.
  DELEGATION:TOO_FEW_NS:
    args: 1
    descr: Only one name server was found for the zone. You should always have at least two name servers for a zone to be able to handle transient connectivity problems.
    format: Too few name servers (%s).
  DELEGATION:TOO_FEW_NS_IPV4:
    args: 1
    descr: Only one IPv4 name server was found for the zone. You should always have at least two IPv4 name servers for a zone to be able to handle transient connectivity problems.
    format: Too few IPv4 name servers (%s).
  DELEGATION:TOO_FEW_NS_IPV6:
    args: 1
    descr: Only one IPv6 name server was found for the zone. You should always have at least two IPv6 name servers for a zone to be able to handle transient connectivity problems.
    format: Too few IPv6 name servers (%s).
  DNS:ADDRESS_BLACKLISTED:
    args: 4
    format: Name server %s blacklisted.
  DNS:ADDRESS_BLACKLIST_ADD:
    args: 4
    format: Adding name server %s to blacklist.
  DNS:ANSWER_DUMP:
    args: 1
    format: 'DNS query returned: %s'
  DNS:CHILD_RESPONSE:
    args: 1
    format: 'DNS response from child: %s'
  DNS:DNSSEC_DESIRED:
    args: 0
    format: DNS resolver DNSSEC desired.
  DNS:DNSSEC_DISABLED:
    args: 0
    format: DNS resolver DNSSEC disabled.
  DNS:EXPLICIT_RESPONSE:
    args: 1
    format: 'Name server response: %s'
  DNS:FAKE_PACKET:
    args: 3
    format: Faking response packet in zone %s for %s/%s.
  DNS:FIND_ADDRESSES:
    args: 2
    format: Found addresses of %s/%s
  DNS:FIND_ADDRESSES_RESULT:
    args: 3
    format: 'Addresses for %s/%s: %s'
  DNS:FIND_MX_BEGIN:
    args: 1
    format: Lookup up mail exchanger for %s
  DNS:FIND_MX_RESULT:
    args: 2
    format: 'Found mail exchanger for %s: %s'
  DNS:FIND_PARENT:
    args: 2
    format: Find parent of %s/%s.
  DNS:FIND_PARENT_BEGIN:
    args: 2
    format: Trying to find parent of %s/%s
  DNS:FIND_PARENT_DOMAIN:
    args: 1
    format: Using %s as a start for parent trace.
  DNS:FIND_PARENT_RESULT:
    args: 3
    format: Resolved %s as parent of %s/%s.
  DNS:FIND_PARENT_TRY:
    args: 1
    format: Checking %s as parent domain.
  DNS:FIND_PARENT_UPPER:
    args: 1
    format: Parent might be %s.
  DNS:GET_NS_AT_CHILD:
    args: 2
    format: DNS query for NS of %s/%s at child.
  DNS:GET_NS_AT_PARENT:
    args: 2
    format: DNS query for NS of %s/%s at parent.
  DNS:INITIALIZING_NAMESERVERS:
    args: 2
    format: Initializing name servers for %s/%s.
  DNS:LOOKUP_ERROR:
    args: 1
    descr: ~
    format: DNS lookup error (%s).
  DNS:NAMESERVERS_INITIALIZED:
    args: 2
    format: Name servers for %s/%s initialized.
  DNS:NAMESERVER_FOUND:
    args: 4
    format: 'Found name server for %s/%s: %s (%s)'
  DNS:NOT_AUTH:
    args: 4
    format: Name server %s not authoritative for %s/%s/%s.
  DNS:NO_ANSWER:
    args: 4
    descr: ~
    format: No answer received from %s when querying for %s/%s/%s.
  DNS:NO_CHILD_NS:
    args: 2
    descr: ~
    format: Failed to find name servers of %s/%s.
  DNS:NO_EDNS:
    args: 1
    descr: 'EDNS is an extension to the DNS protocol. The major change is that the 512-byte size limit of the query/answer packet has been removed, which allows more information to be provided.  EDNS is essential for newer protocols and technologies (such as DNSSEC and IPv6) that requires larger packet sizes.'
    format: EDNS not supported by %s.
  DNS:NO_PARENT:
    args: 2
    descr: DNSCheck failed to find the parent of zone.
    format: Failed to find parent of %s/%s.
  DNS:NO_PARENT_NS:
    args: 3
    descr: ~
    format: Failed to find name servers for %s (parent of %s/%s).
  DNS:NXDOMAIN:
    args: 2
    descr: ~
    format: Domain %s/%s does not exist.
  DNS:PARENT_OF:
    args: 3
    format: Found %s as parent of %s/%s.
  DNS:PARENT_RESPONSE:
    args: 1
    format: 'DNS response from parent: %s'
  DNS:QUERY_CHILD:
    args: 4
    format: Query any name server of %s for %s/%s/%s.
  DNS:QUERY_CHILD_NOCACHE:
    args: 4
    format: Query any name server (without cache) of %s for %s/%s/%s.
  DNS:QUERY_EXPLICIT:
    args: 4
    descr: ~
    format: Query %s for %s/%s/%s.
  DNS:QUERY_PARENT:
    args: 4
    format: Query parent of %s for %s/%s/%s.
  DNS:QUERY_PARENT_NOCACHE:
    args: 4
    format: Query parent (without cache) of %s for %s/%s/%s.
  DNS:QUERY_RESOLVER:
    args: 3
    format: DNS query for %s/%s/%s.
  DNS:QUERY_TIMEOUT:
    args: 4
    descr: ~
    format: Name server %s timed out in query for %s/%s/%s.
  DNS:RECURSION_DESIRED:
    args: 0
    format: DNS resolver recursion desired.
  DNS:RECURSION_DISABLED:
    args: 0
    format: DNS resolver recursion disabled.
  DNS:RESOLVER_QUERY_TIMEOUT:
    args: 3
    descr: ~
    format: DNS resolver timed out in query for %s/%s/%s.
  DNS:RESOLVER_RESPONSE:
    args: 1
    format: 'DNS response from resolver: %s'
  DNS:SETUP_RESOLVER:
    args: 0
    format: DNS resolver set up.
  DNS:SET_BUFSIZE:
    args: 1
    format: DNS resolver EDNS buffer size set to %s.
  DNS:SOA_SERVFAIL:
    args: 1
    format: DNS SERVFAIL when querying %s for SOA
  DNS:TRANSPORT_TCP:
    args: 0
    format: DNS resolver transport set to TCP.
  DNS:TRANSPORT_UDP:
    args: 0
    format: DNS resolver transport set to UDP.
  DNS:UNQUERIBLE_ADDRESS:
    args: 1
    format: Unable to send queries to %s.
  DNSSEC:ADDITIONAL_PROCESSING_BROKEN:
    args: 2
    descr: No DNSSEC signatures were included in replies from the name server.  This is probably due to a misconfiguration at the name server.
    format: 'DNSSEC additional processing broken for %s (server: %s).'
  DNSSEC:ALGORITHM_OK:
    args: 1
    format: Algorithm number %s is OK.
  DNSSEC:ALGORITHM_PRIVATE:
    args: 1
    format: Algorithm number %s is private.
  DNSSEC:ALGORITHM_RESERVED:
    args: 1
    format: Algorithm number %s is reserved.
  DNSSEC:ALGORITHM_UNASSIGNED:
    args: 1
    format: Algorithm number %s is unassigned.
  DNSSEC:BEGIN:
    args: 1
    format: Begin testing DNSSEC for %s.
  DNSSEC:CHECKING_CHILD:
    args: 1
    format: Checking DNSSEC at child (%s).
  DNSSEC:CHECKING_DNSKEY_AT_CHILD:
    args: 1
    format: Checking DNSKEY records for %s at child.
  DNSSEC:CHECKING_DS_AT_PARENT:
    args: 1
    format: Checking DS records for %s at parent.
  DNSSEC:CHECKING_PARENT:
    args: 1
    format: Checking DNSSEC at parent of %s.
  DNSSEC:CHILD_CHECKED:
    args: 1
    format: DNSSEC child checks for %s complete.
  DNSSEC:CHILD_CHECK_ABORTED:
    args: 1
    format: DNSSEC child checks aborted for %s.
  DNSSEC:CONSISTENT_EXTRA_PROCESSING:
    args: 1
    format: Servers for %s have consistent extra processing status.
  DNSSEC:CONSISTENT_SECURITY:
    args: 1
    format: Consistent security for %s.
  DNSSEC:DETERMINE_SECURITY_STATUS:
    args: 1
    format: Determining security status for %s.
  DNSSEC:DNSKEY_ALGORITHM:
    args: 4
    format: "%s's key with tag %s uses algorithm number %s (%s)."
  DNSSEC:DNSKEY_ALGORITHM_NOT_RECOMMENDED:
    args: 3
    descr: 'A DNSKEY using a unrecommended algorithm was found - you should probably not use unrecommended algorithms unless you have a very good reason for using them.'
    format: 'DNSKEY %s (tag %s) is using a not recommended algorithm: %s'
  DNSSEC:DNSKEY_FOUND:
    args: 1
    descr: 'A DNSKEY RRset was found at the child, indicating that the child probably uses DNSSEC.'
    format: Found DNSKEY record for %s at child.
  DNSSEC:DNSKEY_MANDATORY_FOUND:
    args: 1
    format: At least one mandatory algorithm found for DNSKEY %s.
  DNSSEC:DNSKEY_MANDATORY_NOT_FOUND:
    args: 1
    descr: At least one DNSKEY should be of type RSA/SHA1.
    format: No mandatory algorithm found for DNSKEY %s.
  DNSSEC:DNSKEY_NOT_FOUND:
    args: 1
    descr: 'A DNSKEY RRset could not be found at the child, indicating that the child probably does not use DNSSEC.'
    format: Did not find DNSKEY record for %s at child.
  DNSSEC:DNSKEY_NO_VALID_SIGNATURES:
    args: 1
    descr: 'No valid signatures for the DNSKEY RRset for the zone was found - make sure the zone is signed with a valid and published key.'
    format: Not enough valid signatures found for %s.
  DNSSEC:DNSKEY_SEP:
    args: 2
    descr: A secure entry point (SEP) is used as part of the chain of trust from the parent to the child.
    format: DNSKEY %s (tag %s) is marked as a secure entry point (SEP).
  DNSSEC:DNSKEY_SIGNATURE_OK:
    args: 2
    format: Found RRSIG(DNSKEY %s) created by published key (tag %s).
  DNSSEC:DNSKEY_SIGNER_UNPUBLISHED:
    args: 2
    descr: DNSSEC signatures created by unpublished keys can't be validated by validating resolvers.  All keys used to sign data must be published.
    format: Found RRSIG(DNSKEY %s) created by unpublished key (tag %s).
  DNSSEC:DNSKEY_SKIP_PROTOCOL:
    args: 3
    descr: DNSKEYs must have a protocol value of DNSSEC (3).
    format: DNSKEY %s (tag %s) is not a DNSSEC key (protocol=%s).
  DNSSEC:DNSKEY_SKIP_TYPE:
    args: 2
    descr: DNSKEYs must be a zone key.
    format: DNSKEY %s (tag %s) is not a zone key.
  DNSSEC:DNSKEY_VALID_SIGNATURES:
    args: 1
    format: Enough valid signatures found for %s.
  DNSSEC:DS_ALGORITHM:
    args: 4
    format: "%s's key with tag %s uses algorithm number %s (%s)."
  DNSSEC:DS_FOUND:
    args: 1
    descr: 'A DS (delegation signer) RRset was found at the parent.  This indicates a secure delegation, i.e. the child must be signed.'
    format: Found DS record for %s at parent.
  DNSSEC:DS_KEYREF_INVALID:
    args: 2
    descr: 'The DS RRset must refer to a valid DNSKEY at the child, or the chain of trust between the parent and the child will be broken and validating resolver will not be able to validate answers from the child.'
    format: 'Parent %s refers to invalid key at child: %s'
  DNSSEC:DS_KEYREF_OK:
    args: 2
    format: 'Parent %s refers to valid key at child: %s'
  DNSSEC:DS_MANDATORY_FOUND:
    args: 1
    format: At least one mandatory DS algorithm found for %s.
  DNSSEC:DS_MANDATORY_NOT_FOUND:
    args: 1
    descr: 'Since none of the hash algorithms published in the DS RRset are mandatory, some validating resolvers will not be able to follow the chain of trust from the parent to the child.'
    format: No mandatory DS algorithm found for %s.
  DNSSEC:DS_TO_NONSEP:
    args: 2
    descr: 'The DS RRset refers to a DNSKEY at the child, but the key is not marked as a secure entry point.'
    format: 'Parent DS(%s) does not refer to secure entry point (SEP) at child: %s'
  DNSSEC:DS_TO_SEP:
    args: 2
    format: 'Parent DS(%s) refers to secure entry point (SEP) at child: %s'
  DNSSEC:END:
    args: 1
    format: Done testing DNSSEC for %s.
  DNSSEC:EXTRA_PROCESSING:
    args: 1
    format: Nameserver %s does DNSSEC extra processing.
  DNSSEC:INCONSISTENT_EXTRA_PROCESSING:
    args: 1
    format: Not all servers for %s has DNSSEC extra processing turned on.
  DNSSEC:INCONSISTENT_SECURITY:
    args: 1
    descr: 'The parent has a secure delegation to the child (indicated by DS RRset at the parent), but the child has no DNSKEY records.  This is probably due to a previously signed zone that became unsigned without requesting the parent to remove the secure delegation.'
    format: 'Inconsistent security for %s - DS found at parent, but no DNSKEY found at child.'
  DNSSEC:MISSING_DS:
    args: 1
    descr: 'The child seems to use DNSSEC, but the parent has no secure delegation.  The chain of trust between the parent and the child is broken and validating resolvers will not be able to validate answers from the child.'
    format: 'Broken chain of trust for %s - DNSKEY found at child, but no DS was found at parent.'
  DNSSEC:NO_DS_FOUND:
    args: 1
    descr: 'A DS (delegation signer) RRset could not be found at the parent.  This indicates an insecure delegation, i.e. the child does not have to be signed.'
    format: Did not find DS record for %s at parent.
  DNSSEC:NO_EXTRA_PROCESSING:
    args: 1
    format: Nameserver %s does not do DNSSEC extra processing.
  DNSSEC:NO_SIGNATURES:
    args: 1
    descr: No DNSSEC signatures were found when querying the zone. Perhaps the zone isn't signed?
    format: No signatures found for %s.
  DNSSEC:NO_VALID_DS:
    args: 1
    format: 'The zone %s has published DS records, but none of them work.'
  DNSSEC:PARENT_CHECKED:
    args: 1
    format: DNSSEC parent checks for %s complete.
  DNSSEC:PARENT_DS:
    args: 2
    format: 'Found DS(%s) at parent: %s'
  DNSSEC:RRSIG_EXPIRED:
    args: 1
    descr: Expired signatures will be ignored by validating resolvers.
    format: 'DNSSEC signature expired: %s'
  DNSSEC:RRSIG_EXPIRES_AT:
    args: 1
    format: 'DNSSEC signature expires at: %s'
  DNSSEC:RRSIG_FAILS_VERIFY:
    args: 2
    format: 'DNSSEC signature %s fails to validate the RR set: %s'
  DNSSEC:RRSIG_NOT_YET_VALID:
    args: 1
    descr: Signatures with an inception date in the future will be ignored by validating resolvers.
    format: 'DNSSEC signature not yet valid: %s'
  DNSSEC:RRSIG_VALID:
    args: 1
    format: 'DNSSEC signature valid: %s'
  DNSSEC:RRSIG_VERIFIES:
    args: 1
    format: DNSSEC signature %s matches records.
  DNSSEC:SKIPPED_NO_KEYS:
    args: 1
    format: 'No DNSKEY(s) found at child, other tests skipped.'
  DNSSEC:SOA_NO_VALID_SIGNATURES:
    args: 1
    descr: 'No valid signatures for the SOA RRset for the zone was found - make sure the zone is signed with a valid and published key.'
    format: Not enough valid signatures over SOA RRset found for %s.
  DNSSEC:SOA_SIGNATURE_OK:
    args: 2
    format: RRSIG(SOA %s) created by DNSKEY (tag %s) OK.
  DNSSEC:SOA_SIGNER_UNPUBLISHED:
    args: 2
    descr: DNSSEC signatures created by unpublished keys can't be validated by validating resolvers.  All keys used to sign data must be published.
    format: Found RRSIG(SOA %s) created by published key (tag %s).
  DNSSEC:SOA_VALID_SIGNATURES:
    args: 1
    format: Enough valid signatures over SOA RRset found for %s.
  ENGINE:CRASH:
    args: 0
    format: DNSCheck engine crashed
  FAKEGLUE:BROKEN_INFO:
    args: 2
    format: 'The IP address %s (given for name server %s) is malformed.'
  FAKEGLUE:MALFORMED_DS:
    args: 1
    format: "The given DS record could not be parsed: %s"
  FAKEGLUE:NO_ADDRESS:
    args: 1
    format: The name server %s has no A or AAAA address records.
  HOST:BEGIN:
    args: 1
    format: Begin testing host %s.
  HOST:CNAME_FOUND:
    args: 1
    descr: 'The host name is an alias (CNAME), which is not allowed.  Host names must be published with an A or AAAA record.'
    format: Host name %s refers to a CNAME.
  HOST:END:
    args: 1
    format: Done testing host %s.
  HOST:ILLEGAL_NAME:
    args: 2
    descr: 'The hostname is not syntactially correct according to RFC 952.  A common error is to begin the hostname with a non-letter (a-z) or use invalid characters (only a-z, 0-9 and - are allowed).'
    format: Host name %s is illegal (syntax error at %s)
  HOST:NOT_FOUND:
    args: 1
    descr: No IPv4 or IPv6 address was found for the host name.
    format: No address found for %s.
  MAIL:ADDRESS_SYNTAX:
    args: 1
    format: '%s is not a valid email address.'
  MAIL:ALL_MX_IN_ZONE:
    args: 2
    format: All mail servers for %s are in zone %s.
  MAIL:BEGIN:
    args: 1
    format: Begin testing email address %s.
  MAIL:DELIVERY_IPV4_NOT_OK:
    args: 1
    format: Delivery over IPv4 to %s could not be done.
  MAIL:DELIVERY_IPV4_OK:
    args: 1
    format: Delivery over IPv4 to %s ok.
  MAIL:DELIVERY_IPV6_NOT_OK:
    args: 1
    format: Delivery over IPv6 to %s could not be done.
  MAIL:DELIVERY_IPV6_OK:
    args: 1
    format: Delivery over IPv6 to %s ok.
  MAIL:DOMAIN_NOT_FOUND:
    args: 1
    descr: No mail exchanger was found for the domain.  This makes it impossible to deliver email to any recipient within the domain.
    format: No mail exchanger found for domain %s.
  MAIL:END:
    args: 1
    format: Done testing email address %s.
  MAIL:HOST_ERROR:
    args: 1
    descr: The hostname for the mail exchanger is invalid.  A common error is to point the mail exchanger to an alias (CNAME) or directly to an IP address.
    format: Invalid host name for mail exchanger %s.
  MAIL:IPV6_ONLY:
    args: 1
    descr: 'This mail exchanger is only reachable via IPv6, making it impossible for most hosts on the Internet to deliver emails to it. If more than one MX exists and at least one is reachable by IPv4 this can be ignored.'
    format: Mail exchanger %s is reachable by IPv6 only.
  MAIL:MAIL_EXCHANGER:
    args: 2
    format: Mail exchangers for %s found %s.
  NAMESERVER:AUTH:
    args: 3
    format: Name server %s (%s) authoritative for %s.
  NAMESERVER:AXFR_CLOSED:
    args: 3
    format: Name server %s (%s) closed for zone transfer of %s.
  NAMESERVER:AXFR_OPEN:
    args: 3
    descr: This name server accepts zone transfer requests from any party.
    format: Name server %s (%s) open for zone transfer of %s.
  NAMESERVER:AXFR_SKIP:
    args: 3
    descr: 'The name server was not tested for zone transfer, since it did not answer queries over TCP.'
    format: Name server %s (%s) not checked for zone transfer of %s.
  NAMESERVER:BEGIN:
    args: 1
    format: Begin testing name server %s.
  NAMESERVER:CHECKING_AUTH:
    args: 2
    format: Checking authority for %s (%s).
  NAMESERVER:CHECKING_LEGACY_ID:
    args: 2
    format: Checking for legacy name server ID of %s (%s).
  NAMESERVER:CHECKING_NSID:
    args: 2
    format: Checking for name server ID of %s (%s).
  NAMESERVER:CHECKING_RECURSION:
    args: 2
    format: Checking recursion for %s at address %s.
  NAMESERVER:END:
    args: 1
    format: Done testing name server %s.
  NAMESERVER:HOST_ERROR:
    args: 1
    descr: 'The specified host name is not a valid host name or the host name points to an invalid IP address, e.g. a private or reserved IP address.'
    format: Host name or address error for %s.
  NAMESERVER:LEGACY_ID:
    args: 4
    format: 'Legacy name server ID for %s (%s): %s = %s'
  NAMESERVER:LEGACY_ID_SKIP:
    args: 2
    format: Name server %s (%s) not checked for legacy name server ID.
  NAMESERVER:NOT_AUTH:
    args: 3
    descr: 'The name server does not answer authoritatively to queries for the tested domain.  This is probably due to misconfiguration where the name server is not set up to serve the tested domain.'
    format: Name server %s (%s) not authoritative for %s.
  NAMESERVER:NOT_RECURSIVE:
    args: 2
    format: Name server %s (%s) is not recursive.
  NAMESERVER:NO_TCP:
    args: 3
    descr: 'The name server failed to answer queries sent over TCP.  This is probably due to the name server not correctly set up or due to misconfgured filtering in a firewall. It is a rather common misconception that DNS does not need TCP unless they provide zone transfers - perhaps the name server administrator is not aware that TCP usually is a requirement.'
    format: Name server %s (%s) does not answer queries over TCP.
  NAMESERVER:NO_UDP:
    args: 3
    descr: The name server failed to answer queries sent over UDP.  This is probably due to the name server not correctly set up or due to misconfigured filtering in a firewall.
    format: Name server %s (%s) does not answer queries over UDP.
  NAMESERVER:NSID:
    args: 3
    format: 'Name server ID for %s (%s): %s'
  NAMESERVER:NSID_SKIP:
    args: 2
    format: Name server %s (%s) not checked for name server ID.
  NAMESERVER:RECURSIVE:
    args: 2
    descr: "The name server answers recursive queries for 3rd parties (such as DNSCheck). By making a recursive query to a name server that provides recursion, an attacker can cause a name server to look up and cache information contained in zones under their control. Thus the victim name server is made to query the attacker's malicious name servers, resulting in the victim caching and serving bogus data."
    format: Name server %s (%s) is recursive.
  NAMESERVER:SKIPPED_IPV4:
    args: 1
    format: 'IPv4 disabled - will not test name server at %s'
  NAMESERVER:SKIPPED_IPV6:
    args: 1
    format: 'IPv6 disabled - will not test name server at %s'
  NAMESERVER:TCP_OK:
    args: 3
    format: Name server %s (%s) answers queries over TCP.
  NAMESERVER:TESTING_AXFR:
    args: 2
    format: Testing zone transfer for name server %s (%s).
  NAMESERVER:TESTING_TCP:
    args: 2
    format: Testing TCP queries to name server %s at address %s.
  NAMESERVER:TESTING_UDP:
    args: 2
    format: Testing UDP queries to name server %s at addrress %s.
  NAMESERVER:UDP_OK:
    args: 3
    format: Name server %s (%s) answers queries over UDP.
  NSTIME:AVERAGE:
    args: 6
    format: 'Zone %s, server %s: %s calls, %sms avg, %sms min, %sms max, %sms stddev.'
  SMTP:BANNER:
    args: 2
    format: 'SMTP banner: %s'
  SMTP:BEGIN:
    args: 3
    format: Begin testing mail server %s (%s) with %s.
  SMTP:CONNECT_FAILED:
    args: 2
    descr: DNSCheck failed to connect to the mail server.  The server could be down or unreachable due to misconfigured routing and/or filtering.
    format: Failed to connect to %s (%s).
  SMTP:END:
    args: 3
    format: Done testing mail server %s (%s) with %s.
  SMTP:HELLO_FAILED:
    args: 1
    descr: The mail server did not accept our polite greeting.  This is probably due to misconfiguration.
    format: SMTP HELO failed while talking to %s.
  SMTP:MAIL_FROM:
    args: 1
    format: Using %s as SMTP from (MAIL_FROM).
  SMTP:MAIL_FROM_REJECTED:
    args: 1
    descr: The mail server did not accept our sender address.  DNSCheck uses a standard null sender address which must be accepted by mail servers.
    format: Host did not accept %s as SMTP destination.
  SMTP:OK:
    args: 3
    format: SMTP testing of %s (%s) with %s succeeded without errors.
  SMTP:QUIT:
    args: 0
    format: Sending SMTP quit (QUIT).
  SMTP:RAW:
    args: 1
    format: 'SMTP Response: %s'
  SMTP:RCPT_TO:
    args: 1
    format: Using %s as SMTP recipient (RCPT_TO).
  SMTP:RECIPIENT_REJECTED:
    args: 1
    descr: The mail server did no accept mail to the recipient address.  This is probably due to an unknown address.
    format: Host did not accept %s as SMTP recipient.
  SMTP:RSET:
    args: 0
    format: Sending SMTP reset (RSET).
  SMTP:TIMEOUT:
    args: 0
    format: The mail server timed out in SMTP dialog.
  SOA:BEGIN:
    args: 1
    format: Begin testing SOA parameters for %s.
  SOA:END:
    args: 1
    format: Done testing SOA parameters for %s.
  SOA:EXPIRE_OK:
    args: 3
    format: 'SOA expire for %s OK (%s) - recommended >= %s.'
  SOA:EXPIRE_SMALL:
    args: 3
    descr: The SOA expire value defines how long a secondary name server will wait before considering DNS data for a zone to be too old to serve in case it fails to reach the primary name server.
    format: 'SOA expire for %s too small (%s) - recommended >= %s.'
  SOA:EXPIRE_VS_REFRESH:
    args: 1
    descr: 'The SOA expire value should be at least 7 times the SOA refresh value, to give secondary name servers a fair chance of refreshing their copy of the zone before the data is considered too old to serve.'
    format: SOA expire for %s lower than refresh.
  SOA:FOUND:
    args: 1
    format: Found SOA record for %s.
  SOA:MINIMUM_LARGE:
    args: 3
    descr: 'The SOA minimum is used to tell caching resolvers how long they may cache negative answers. If the value is too large, negative caching will be to aggressive.'
    format: 'SOA minimum for %s too large (%s) - recommended <= %s.'
  SOA:MINIMUM_OK:
    args: 4
    format: 'SOA minimum for %s OK (%s) - recommended between %s and %s.'
  SOA:MINIMUM_SMALL:
    args: 3
    descr: 'The SOA minimum is used to tell caching resolvers how long they may cache negative answers. If the value is too small, negative caching will not work and resolvers will re-query frequently.'
    format: 'SOA minimum for %s too small (%s) - recommended >= %s.'
  SOA:MNAME_ERROR:
    args: 2
    descr: The SOA MNAME is not a valid host name.
    format: Error while checking SOA MNAME for %s (%s).
  SOA:MNAME_IS_AUTH:
    args: 2
    format: SOA MNAME for %s (%s) is authoritative.
  SOA:MNAME_IS_CNAME:
    args: 2
    format: SOA MNAME %s points to a CNAME (%s).
  SOA:MNAME_NOT_AUTH:
    args: 2
    descr: 'The name server listed as the original or primary source of data for this zone does not answer authoriatively.  This is probably due to misconfiguration; perhaps the SOA MNAME is not set up as a name server for the zone.'
    format: SOA MNAME for %s (%s) is not authoritative.
  SOA:MNAME_PUBLIC:
    args: 2
    descr: The name server listed as the SOA MNAME is listed as a name server.
    format: SOA MNAME for %s (%s) listed as NS.
  SOA:MNAME_STEALTH:
    args: 2
    descr: The name server listed as the SOA MNAME is not listed as a name server.
    format: SOA MNAME for %s (%s) not listed as NS.
  SOA:MNAME_VALID:
    args: 2
    format: SOA MNAME for %s valid (%s).
  SOA:MULTIPLE_SOA:
    args: 1
    descr: Multiple SOA records found when querying the name servers. This is a serious error and definitely due to misconfiguration.
    format: Multiple SOA records found for %s.
  SOA:NOT_FOUND:
    args: 1
    descr: 'No SOA record was found when querying the name server.  This is most probably due to misconfiguration at the name server - a zone must have a SOA record.'
    format: No SOA record found for %s.
  SOA:NS_NOT_FOUND:
    args: 1
    descr: No name server records were found for the zone. This is a serious error and definitely due to misconfiguration.
    format: No NS record(s) found for %s.
  SOA:REFRESH_OK:
    args: 3
    format: 'SOA refresh for %s OK (%s) - recommended >= %s.'
  SOA:REFRESH_SMALL:
    args: 3
    descr: SOA refresh decides how often a secondary name server should check the primary name server for zone updates.
    format: 'SOA refresh for %s too small (%s) - recommended >= %s.'
  SOA:RETRY_OK:
    args: 3
    format: 'SOA retry for %s OK (%s) - recommended >= %s.'
  SOA:RETRY_SMALL:
    args: 3
    descr: 'The retry value is the amount of time secondary name servers will wait before contacting the primary name server again if the last attempt failed. If the retry value is too small, secondary name servers will retry too frequently.'
    format: 'SOA retry for %s too small (%s) - recommended >= %s.'
  SOA:RETRY_VS_REFRESH:
    args: 3
    descr: "The retry value is the amount of time secondary name servers will wait before contacting the primary name server again if the last attempt failed.  If the refresh value is lower than the retry value, it's useless."
    format: SOA refresh for %s lower than retry (%s vs %s).
  SOA:RNAME_DELIVERABLE:
    args: 3
    format: Successful attempt to deliver email for SOA RNAME of %s (%s) using %s.
  SOA:RNAME_SYNTAX:
    args: 2
    descr: 'The email address specified in SOA RNAME is specified incorrectly.  A common error is to use @ in the address field - an address like hostmaster@example.com must be specified as hostmaster.example.com.'
    format: 'Invalid SOA RNAME syntax for %s: %s'
  SOA:RNAME_UNDELIVERABLE:
    args: 3
    descr: DNSCheck failed to deliver email to the email address listed as the one responsible for the zone.
    format: Failed to deliver email for SOA RNAME of %s (%s) using %s.
  SOA:SERIAL_IS_ZERO:
    args: 1
    format: The serial number in the SOA record for zone %s should not be zero.
  SOA:SKIPPED_IPV4:
    args: 1
    format: 'IPv4 disabled - will not query SOA MNAME at %s'
  SOA:SKIPPED_IPV6:
    args: 1
    format: 'IPv6 disabled - will not query SOA MNAME at %s'
  SOA:TTL_OK:
    args: 3
    format: 'SOA TTL for %s OK (%s) - recommended >= %s.'
  SOA:TTL_SMALL:
    args: 3
    descr: 'The smaller the SOA TTL value, the more often resolvers need to requery for SOA record.'
    format: 'SOA TTL for %s too small (%s) - recommended >= %s.'
  ZONE:BEGIN:
    args: 2
    format: Begin testing zone %s with version %s.
  ZONE:END:
    args: 1
    format: Test completed for zone %s.
  ZONE:FATAL_DELEGATION:
    args: 1
    descr: No name servers found at child or at parent. No further testing can be performed.
    format: Fatal error in delegation for zone %s.
  ZONE:FATAL_NO_CHILD_NS:
    args: 1
    descr: No child name servers found. No further testing can be performed.
    format: 'Fatal error - no child name servers for zone %s.'
  ZONE:INVALID_NAME:
    args: 1
    format: '%s is not a valid name for a zone.'
  ZONE:VERSIONS:
    args: 1
    format: 'Module versions: %s.'

